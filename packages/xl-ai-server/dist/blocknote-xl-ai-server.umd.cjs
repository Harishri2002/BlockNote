(function(o,u){typeof exports=="object"&&typeof module<"u"?u(exports,require("@hono/node-server"),require("hono"),require("node:fs"),require("node:http2"),require("undici")):typeof define=="function"&&define.amd?define(["exports","@hono/node-server","hono","node:fs","node:http2","undici"],u):(o=typeof globalThis<"u"?globalThis:o||self,u(o["blocknote-xl-ai-server"]={},o.nodeServer,o.hono,o.node_fs,o.node_http2,o.undici))})(this,function(o,u,g,f,w,p){"use strict";var x=r=>{const t={...{origin:"*",allowMethods:["GET","HEAD","PUT","POST","DELETE","PATCH"],allowHeaders:[],exposeHeaders:[]},...r},i=(s=>typeof s=="string"?s==="*"?()=>s:e=>s===e?e:null:typeof s=="function"?s:e=>s.includes(e)?e:null)(t.origin);return async function(e,S){var q,v;function a(n,c){e.res.headers.set(n,c)}const A=i(e.req.header("origin")||"",e);if(A&&a("Access-Control-Allow-Origin",A),t.origin!=="*"){const n=e.req.header("Vary");n?a("Vary",n):a("Vary","Origin")}if(t.credentials&&a("Access-Control-Allow-Credentials","true"),(q=t.exposeHeaders)!=null&&q.length&&a("Access-Control-Expose-Headers",t.exposeHeaders.join(",")),e.req.method==="OPTIONS"){t.maxAge!=null&&a("Access-Control-Max-Age",t.maxAge.toString()),(v=t.allowMethods)!=null&&v.length&&a("Access-Control-Allow-Methods",t.allowMethods.join(","));let n=t.allowHeaders;if(!(n!=null&&n.length)){const c=e.req.header("Access-Control-Request-Headers");c&&(n=c.split(/\s*,\s*/))}return n!=null&&n.length&&(a("Access-Control-Allow-Headers",n.join(",")),e.res.headers.append("Vary","Access-Control-Request-Headers")),e.res.headers.delete("Content-Length"),e.res.headers.delete("Content-Type"),new Response(null,{headers:e.res.headers,status:204,statusText:e.res.statusText})}await S()}};p.setGlobalDispatcher(new p.Agent({allowH2:!0}));const T=/^content-(?:encoding|length|range)$/i,y=async(r,l)=>{const t=new Request(r,l);t.headers.delete("accept-encoding");const i=await fetch(t),s=[...i.headers.entries()].filter(([e])=>!T.test(e)&&e!=="strict-transport-security");return new Response(i.body,{...i,status:i.status,statusText:i.statusText,headers:s})};function H(r){return r==="openai"?{key:process.env.OPENAI_API_KEY}:r==="groq"?{key:process.env.GROQ_API_KEY}:r==="albert-etalab"?{key:process.env.ALBERT_ETALAB_API_KEY}:"not-found"}const h=new g.Hono;h.use("/health",async r=>r.json({status:"ok"})),h.use("/ai",x(),async r=>{var e;const l=r.req.query("url");if(!l)return r.json({error:"url parameter is required"},400);const t=r.req.query("provider");if(!t)return r.json({error:"provider parameter is required"},400);const i=H(t);if(i==="not-found"||!((e=i.key)!=null&&e.length))return r.json({error:`provider / key not found for provider ${t}. Make sure to load correct env variables.`},404);console.log("Proxying request to",l);const s=new Request(l,r.req.raw);return s.headers.set("Authorization",`Bearer ${i.key}`),y(s)});const d=f.existsSync("localhost.pem");u.serve({fetch:h.fetch,createServer:d?w.createSecureServer:void 0,serverOptions:{key:d?f.readFileSync("localhost-key.pem"):void 0,cert:d?f.readFileSync("localhost.pem"):void 0},port:Number(process.env.PORT)||3e3},r=>{console.log(`Server is running on ${r.address}${r.port}, http2: ${d}`)}),o.proxyFetch=y,Object.defineProperty(o,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=blocknote-xl-ai-server.umd.cjs.map
