{"version":3,"file":"blocknote-ariakit.umd.cjs","sources":["../src/input/Form.tsx","../src/input/TextInput.tsx","../src/menu/Menu.tsx","../src/panel/Panel.tsx","../src/panel/PanelButton.tsx","../src/panel/PanelFileInput.tsx","../src/panel/PanelTab.tsx","../src/panel/PanelTextInput.tsx","../src/popover/Popover.tsx","../src/sideMenu/SideMenu.tsx","../src/sideMenu/SideMenuButton.tsx","../src/suggestionMenu/gridSuggestionMenu/GridSuggestionMenu.tsx","../src/suggestionMenu/gridSuggestionMenu/GridSuggestionMenuEmptyItem.tsx","../src/suggestionMenu/gridSuggestionMenu/GridSuggestionMenuItem.tsx","../src/suggestionMenu/gridSuggestionMenu/GridSuggestionMenuLoader.tsx","../src/suggestionMenu/SuggestionMenu.tsx","../src/suggestionMenu/SuggestionMenuEmptyItem.tsx","../src/suggestionMenu/SuggestionMenuItem.tsx","../src/suggestionMenu/SuggestionMenuLabel.tsx","../src/suggestionMenu/SuggestionMenuLoader.tsx","../src/tableHandle/ExtendButton.tsx","../src/tableHandle/TableHandle.tsx","../src/toolbar/Toolbar.tsx","../src/toolbar/ToolbarButton.tsx","../src/toolbar/ToolbarSelect.tsx","../src/index.tsx"],"sourcesContent":["import { FormProvider as AriakitFormProvider } from \"@ariakit/react\";\n\nimport { assertEmpty } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\n\nexport const Form = (props: ComponentProps[\"Generic\"][\"Form\"][\"Root\"]) => {\n  const { children, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return <AriakitFormProvider>{children}</AriakitFormProvider>;\n};\n","import {\n  FormInput as AriakitFormInput,\n  FormLabel as AriakitFormLabel,\n} from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const TextInput = forwardRef<\n  HTMLInputElement,\n  ComponentProps[\"Generic\"][\"Form\"][\"TextInput\"]\n>((props, ref) => {\n  const {\n    className,\n    name,\n    label,\n    variant,\n    icon,\n    value,\n    autoFocus,\n    placeholder,\n    disabled,\n    onKeyDown,\n    onChange,\n    onSubmit,\n    autoComplete,\n    ...rest\n  } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <>\n      {props.label && <AriakitFormLabel name={name}>{label}</AriakitFormLabel>}\n      <div className=\"bn-ak-input-wrapper\">\n        {icon}\n        <AriakitFormInput\n          className={mergeCSSClasses(\n            \"bn-ak-input\",\n            className || \"\",\n            variant === \"large\" ? \"bn-ak-input-large\" : \"\"\n          )}\n          ref={ref}\n          name={name}\n          value={value}\n          autoFocus={autoFocus}\n          placeholder={placeholder}\n          disabled={disabled}\n          onKeyDown={onKeyDown}\n          onChange={onChange}\n          onSubmit={onSubmit}\n          autoComplete={autoComplete}\n        />\n      </div>\n    </>\n  );\n});\n","import {\n  CheckboxCheck as AriakitCheckboxCheck,\n  Menu as AriakitMenu,\n  MenuButton as AriakitMenuButton,\n  MenuButtonArrow as AriakitMenuButtonArrow,\n  MenuGroupLabel as AriakitMenuGroupLabel,\n  MenuItem as AriakitMenuItem,\n  MenuProvider as AriakitMenuProvider,\n  MenuSeparator as AriakitMenuSeparator,\n} from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const Menu = (props: ComponentProps[\"Generic\"][\"Menu\"][\"Root\"]) => {\n  const {\n    children,\n    onOpenChange,\n    position,\n    sub, // unused\n    ...rest\n  } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <AriakitMenuProvider\n      placement={position}\n      setOpen={onOpenChange}\n      virtualFocus={true}>\n      {children}\n    </AriakitMenuProvider>\n  );\n};\n\nexport const MenuDropdown = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"Generic\"][\"Menu\"][\"Dropdown\"]\n>((props, ref) => {\n  const {\n    className,\n    children,\n    sub, // unused\n    ...rest\n  } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <AriakitMenu\n      unmountOnHide={true}\n      className={mergeCSSClasses(\"bn-ak-menu\", className || \"\")}\n      ref={ref}>\n      {children}\n    </AriakitMenu>\n  );\n});\n\nexport const MenuItem = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"Generic\"][\"Menu\"][\"Item\"]\n>((props, ref) => {\n  const { className, children, icon, checked, subTrigger, onClick, ...rest } =\n    props;\n\n  assertEmpty(rest);\n\n  if (subTrigger) {\n    return (\n      <AriakitMenuButton\n        render={<AriakitMenuItem />}\n        className={mergeCSSClasses(\"bn-ak-menu-item\", className || \"\")}\n        ref={ref}\n        onClick={onClick}>\n        {icon}\n        {children}\n        <AriakitMenuButtonArrow />\n        {checked !== undefined && <AriakitCheckboxCheck checked={checked} />}\n      </AriakitMenuButton>\n    );\n  }\n  return (\n    <AriakitMenuItem\n      className={mergeCSSClasses(\"bn-ak-menu-item\", className || \"\")}\n      ref={ref}\n      onClick={onClick}>\n      {icon}\n      {children}\n      {checked !== undefined && <AriakitCheckboxCheck checked={checked} />}\n    </AriakitMenuItem>\n  );\n});\n\nexport const MenuLabel = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"Generic\"][\"Menu\"][\"Label\"]\n>((props, ref) => {\n  const { className, children, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <AriakitMenuGroupLabel\n      className={mergeCSSClasses(\"bn-ak-group-label\", className || \"\")}\n      ref={ref}>\n      {children}\n    </AriakitMenuGroupLabel>\n  );\n});\n\nexport const MenuTrigger = (\n  props: ComponentProps[\"Generic\"][\"Menu\"][\"Trigger\"]\n) => {\n  const { children, sub, ...rest } = props;\n\n  assertEmpty(rest);\n\n  if (sub) {\n    return children;\n  }\n\n  return <AriakitMenuButton render={children as any}></AriakitMenuButton>;\n};\n\nexport const MenuDivider = forwardRef<\n  HTMLHRElement,\n  ComponentProps[\"Generic\"][\"Menu\"][\"Divider\"]\n>((props, ref) => {\n  const { className, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <AriakitMenuSeparator\n      className={mergeCSSClasses(\"bn-ak-separator\", className || \"\")}\n      ref={ref}\n    />\n  );\n});\n","import {\n  Tab as AriakitTab,\n  TabList as AriakitTabList,\n  TabPanel as AriakitTabPanel,\n  TabProvider as AriakitTabProvider,\n} from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const Panel = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"FilePanel\"][\"Root\"]\n>((props, ref) => {\n  const {\n    className,\n    tabs,\n    defaultOpenTab,\n    openTab,\n    setOpenTab,\n    loading, // TODO: implement loading\n    ...rest\n  } = props;\n  assertEmpty(rest);\n\n  return (\n    <div\n      className={mergeCSSClasses(\"bn-ak-wrapper\", className || \"\")}\n      ref={ref}>\n      <AriakitTabProvider\n        defaultSelectedId={defaultOpenTab}\n        selectedId={openTab}\n        setActiveId={(activeId) => {\n          if (activeId) {\n            setOpenTab(activeId);\n          }\n        }}>\n        {/*{loading && <LoadingOverlay visible={loading} />}*/}\n\n        <AriakitTabList className={\"bn-ak-tab-list\"}>\n          {tabs.map((tab) => (\n            <AriakitTab className={\"bn-ak-tab\"} id={tab.name} key={tab.name}>\n              {tab.name}\n            </AriakitTab>\n          ))}\n        </AriakitTabList>\n\n        <div className={\"bn-ak-panels\"}>\n          {tabs.map((tab) => (\n            <AriakitTabPanel tabId={tab.name} key={tab.name}>\n              {tab.tabPanel}\n            </AriakitTabPanel>\n          ))}\n        </div>\n      </AriakitTabProvider>\n    </div>\n  );\n});\n","import { Button as AriakitButton } from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const PanelButton = forwardRef<\n  HTMLButtonElement,\n  ComponentProps[\"FilePanel\"][\"Button\"]\n>((props, ref) => {\n  const { className, children, onClick, label, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <AriakitButton\n      className={mergeCSSClasses(\"bn-ak-button\", className || \"\")}\n      onClick={onClick}\n      aria-label={label}\n      ref={ref}>\n      {children}\n    </AriakitButton>\n  );\n});\n","import {\n  FormInput as AriakitFormInput,\n  FormProvider as AriakitFormProvider,\n} from \"@ariakit/react\";\n\nimport { assertEmpty } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const PanelFileInput = forwardRef<\n  HTMLInputElement,\n  ComponentProps[\"FilePanel\"][\"FileInput\"]\n>((props, ref) => {\n  const { className, accept, value, placeholder, onChange, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <AriakitFormProvider>\n      <AriakitFormInput\n        className={className}\n        ref={ref}\n        name={\"panel-input\"}\n        type={\"file\"}\n        accept={accept}\n        value={value ? value.name : undefined}\n        onChange={async (e) => onChange?.(e.target.files![0])}\n        placeholder={placeholder}\n      />\n    </AriakitFormProvider>\n  );\n});\n","import { assertEmpty } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const PanelTab = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"FilePanel\"][\"TabPanel\"]\n>((props, ref) => {\n  const { className, children, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <div className={className} ref={ref}>\n      {children}\n    </div>\n  );\n});\n","import {\n  FormInput as AriakitFormInput,\n  FormProvider as AriakitFormProvider,\n} from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const PanelTextInput = forwardRef<\n  HTMLInputElement,\n  ComponentProps[\"FilePanel\"][\"TextInput\"]\n>((props, ref) => {\n  const { className, value, placeholder, onKeyDown, onChange, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <AriakitFormProvider>\n      <AriakitFormInput\n        className={mergeCSSClasses(\"bn-ak-input\", className || \"\")}\n        name={\"panel-input\"}\n        value={value}\n        placeholder={placeholder}\n        onChange={onChange}\n        onKeyDown={onKeyDown}\n        data-test={\"embed-input\"}\n        ref={ref}\n      />\n    </AriakitFormProvider>\n  );\n});\n","import {\n  Popover as AriakitPopover,\n  PopoverDisclosure as AriakitPopoverDisclosure,\n  PopoverProvider as AriakitPopoverProvider,\n} from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const PopoverTrigger = forwardRef<\n  HTMLButtonElement,\n  ComponentProps[\"Generic\"][\"Popover\"][\"Trigger\"]\n>((props, ref) => {\n  const { children, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return <AriakitPopoverDisclosure render={children as any} ref={ref} />;\n});\n\nexport const PopoverContent = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"Generic\"][\"Popover\"][\"Content\"]\n>((props, ref) => {\n  const { className, children, variant, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <AriakitPopover\n      className={mergeCSSClasses(\"bn-ak-popover\", className || \"\")}\n      ref={ref}>\n      {children}\n    </AriakitPopover>\n  );\n});\n\nexport const Popover = (\n  props: ComponentProps[\"Generic\"][\"Popover\"][\"Root\"]\n) => {\n  const { children, opened, position, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <AriakitPopoverProvider open={opened} placement={position}>\n      {children}\n    </AriakitPopoverProvider>\n  );\n};\n","import { Group as AriakitGroup } from \"@ariakit/react\";\n\nimport { assertEmpty } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const SideMenu = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"SideMenu\"][\"Root\"]\n>((props, ref) => {\n  const { className, children, ...rest } = props;\n\n  assertEmpty(rest, false);\n\n  return (\n    <AriakitGroup className={className} ref={ref} {...rest}>\n      {children}\n    </AriakitGroup>\n  );\n});\n","import { Button as AriakitButton } from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const SideMenuButton = forwardRef<\n  HTMLButtonElement,\n  ComponentProps[\"SideMenu\"][\"Button\"]\n>((props, ref) => {\n  const {\n    className,\n    children,\n    icon,\n    onClick,\n    label,\n    onDragEnd,\n    onDragStart,\n    draggable,\n    ...rest\n  } = props;\n\n  // false, because rest props can be added by ariakit when button is used as a trigger\n  // assertEmpty in this case is only used at typescript level, not runtime level\n  assertEmpty(rest, false);\n\n  return (\n    <AriakitButton\n      onDragEnd={onDragEnd}\n      onDragStart={onDragStart}\n      draggable={draggable}\n      aria-label={label}\n      className={mergeCSSClasses(\n        \"bn-ak-button bn-ak-secondary\",\n        className || \"\"\n      )}\n      ref={ref}\n      onClick={onClick}\n      {...rest}>\n      {icon}\n      {children}\n    </AriakitButton>\n  );\n});\n","import { assertEmpty } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const GridSuggestionMenu = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"GridSuggestionMenu\"][\"Root\"]\n>((props, ref) => {\n  const { className, children, id, columns, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <div\n      className={className}\n      style={{ gridTemplateColumns: `repeat(${columns}, 1fr)` } as any}\n      ref={ref}\n      id={id}\n      role=\"grid\">\n      {children}\n    </div>\n  );\n});\n","import { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const GridSuggestionMenuEmptyItem = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"GridSuggestionMenu\"][\"EmptyItem\"]\n>((props, ref) => {\n  const { className, children, columns, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <div\n      className={mergeCSSClasses(\"bn-ak-menu-item\", className || \"\")}\n      style={{ gridColumn: `1 / ${columns + 1}` }}\n      ref={ref}>\n      <div className=\"bn-ak-suggestion-menu-item-label\">{children}</div>\n    </div>\n  );\n});\n","import { assertEmpty } from \"@blocknote/core\";\nimport { ComponentProps, elementOverflow, mergeRefs } from \"@blocknote/react\";\nimport { forwardRef, useEffect, useRef } from \"react\";\n\nexport const GridSuggestionMenuItem = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"GridSuggestionMenu\"][\"Item\"]\n>((props, ref) => {\n  const { className, isSelected, onClick, item, id, ...rest } = props;\n\n  assertEmpty(rest);\n\n  const itemRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!itemRef.current || !isSelected) {\n      return;\n    }\n\n    const overflow = elementOverflow(\n      itemRef.current,\n      document.querySelector(\".bn-grid-suggestion-menu\")!\n    );\n\n    if (overflow === \"top\") {\n      itemRef.current.scrollIntoView(true);\n    } else if (overflow === \"bottom\") {\n      itemRef.current.scrollIntoView(false);\n    }\n  }, [isSelected]);\n\n  return (\n    <div\n      className={className}\n      ref={mergeRefs([ref, itemRef])}\n      id={id}\n      role=\"option\"\n      onClick={onClick}\n      aria-selected={isSelected || undefined}>\n      {item.icon}\n    </div>\n  );\n});\n","import { assertEmpty } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const GridSuggestionMenuLoader = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"GridSuggestionMenu\"][\"Loader\"]\n>((props, ref) => {\n  const {\n    className,\n    children, // unused, using \"dots\" instead\n    columns,\n    ...rest\n  } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <div\n      className={className}\n      style={{ gridColumn: `1 / ${columns + 1}` }}\n      ref={ref}>\n      {children}\n    </div>\n  );\n});\n","import { Group as AriakitGroup } from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const SuggestionMenu = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"SuggestionMenu\"][\"Root\"]\n>((props, ref) => {\n  const { className, children, id, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <AriakitGroup\n      className={mergeCSSClasses(\"bn-ak-menu\", className || \"\")}\n      id={id}\n      role=\"listbox\"\n      ref={ref}>\n      {children}\n    </AriakitGroup>\n  );\n});\n","import { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const SuggestionMenuEmptyItem = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"SuggestionMenu\"][\"EmptyItem\"]\n>((props, ref) => {\n  const { className, children, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <div\n      className={mergeCSSClasses(\"bn-ak-menu-item\", className || \"\")}\n      ref={ref}>\n      <div className=\"bn-ak-suggestion-menu-item-label\">{children}</div>\n    </div>\n  );\n});\n","import { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps, elementOverflow, mergeRefs } from \"@blocknote/react\";\nimport { forwardRef, useEffect, useRef } from \"react\";\n\nexport const SuggestionMenuItem = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"SuggestionMenu\"][\"Item\"]\n>((props, ref) => {\n  const { className, item, isSelected, onClick, id, ...rest } = props;\n\n  assertEmpty(rest);\n\n  const itemRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!itemRef.current || !isSelected) {\n      return;\n    }\n\n    const overflow = elementOverflow(\n      itemRef.current,\n      document.querySelector(\".bn-suggestion-menu, #ai-suggestion-menu\")! // TODO\n    );\n\n    if (overflow === \"top\") {\n      itemRef.current.scrollIntoView(true);\n    } else if (overflow === \"bottom\") {\n      itemRef.current.scrollIntoView(false);\n    }\n  }, [isSelected]);\n\n  return (\n    <div\n      className={mergeCSSClasses(\"bn-ak-menu-item\", className || \"\")}\n      ref={mergeRefs([ref, itemRef])}\n      id={id}\n      onMouseDown={(event) => event.preventDefault()}\n      onClick={onClick}\n      role=\"option\"\n      aria-selected={isSelected || undefined}>\n      {item.icon && (\n        <div\n          className=\"bn-ak-suggestion-menu-item-section\"\n          data-position=\"left\">\n          {item.icon}\n        </div>\n      )}\n      <div className=\"bn-ak-suggestion-menu-item-body\">\n        <div className=\"bn-ak-suggestion-menu-item-title\">{item.title}</div>\n        <div className=\"bn-ak-suggestion-menu-item-subtitle\">\n          {item.subtext}\n        </div>\n      </div>\n      {item.badge && (\n        <div\n          data-position=\"right\"\n          className=\"bn-ak-suggestion-menu-item-section\">\n          <div>{item.badge}</div>\n        </div>\n      )}\n    </div>\n  );\n});\n","import { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const SuggestionMenuLabel = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"SuggestionMenu\"][\"Label\"]\n>((props, ref) => {\n  const { className, children, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <div\n      className={mergeCSSClasses(\"bn-ak-group-label\", className || \"\")}\n      ref={ref}>\n      {children}\n    </div>\n  );\n});\n","import { assertEmpty } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const SuggestionMenuLoader = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"SuggestionMenu\"][\"Loader\"]\n>((props, ref) => {\n  const { className, children, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <div className={className} ref={ref}>\n      {children}\n    </div>\n  );\n});\n","import { Button as AriakitButton } from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const ExtendButton = forwardRef<\n  HTMLButtonElement,\n  ComponentProps[\"TableHandle\"][\"ExtendButton\"]\n>((props, ref) => {\n  const { children, className, onMouseDown, onClick, ...rest } = props;\n\n  // false, because rest props can be added by mantine when button is used as a trigger\n  // assertEmpty in this case is only used at typescript level, not runtime level\n  assertEmpty(rest, false);\n\n  return (\n    <AriakitButton\n      className={mergeCSSClasses(\n        \"bn-ak-button bn-ak-secondary\",\n        className || \"\"\n      )}\n      ref={ref}\n      onMouseDown={onMouseDown}\n      onClick={onClick}\n      {...rest}>\n      {children}\n    </AriakitButton>\n  );\n});\n","import { Button as AriakitButton } from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const TableHandle = forwardRef<\n  HTMLButtonElement,\n  ComponentProps[\"TableHandle\"][\"Root\"]\n>((props, ref) => {\n  const {\n    className,\n    children,\n    draggable,\n    onDragStart,\n    onDragEnd,\n    style,\n    label,\n    ...rest\n  } = props;\n\n  // false, because rest props can be added by ariakit when button is used as a trigger\n  // assertEmpty in this case is only used at typescript level, not runtime level\n  assertEmpty(rest, false);\n\n  return (\n    <AriakitButton\n      className={mergeCSSClasses(\n        \"bn-ak-button bn-ak-secondary\",\n        className || \"\"\n      )}\n      ref={ref}\n      aria-label={label}\n      draggable={draggable}\n      onDragStart={onDragStart}\n      onDragEnd={onDragEnd}\n      style={style}\n      {...rest}>\n      {children}\n    </AriakitButton>\n  );\n});\n","import { Toolbar as AriakitToolbar } from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\ntype ToolbarProps = ComponentProps[\"Toolbar\"][\"Root\"];\n\nexport const Toolbar = forwardRef<HTMLDivElement, ToolbarProps>(\n  (props, ref) => {\n    const { className, children, onMouseEnter, onMouseLeave, ...rest } = props;\n\n    assertEmpty(rest);\n\n    return (\n      <AriakitToolbar\n        className={mergeCSSClasses(\"bn-ak-toolbar\", className || \"\")}\n        ref={ref}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}>\n        {children}\n      </AriakitToolbar>\n    );\n  }\n);\n","import {\n  Tooltip as AriakitTooltip,\n  TooltipAnchor as AriakitTooltipAnchor,\n  ToolbarItem as AriakitToolbarItem,\n  TooltipProvider as AriakitTooltipProvider,\n} from \"@ariakit/react\";\n\nimport { assertEmpty, isSafari, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\ntype ToolbarButtonProps = ComponentProps[\"Toolbar\"][\"Button\"];\n\n/**\n * Helper for basic buttons that show in the formatting toolbar.\n */\nexport const ToolbarButton = forwardRef<HTMLButtonElement, ToolbarButtonProps>(\n  (props, ref) => {\n    const {\n      className,\n      children,\n      mainTooltip,\n      secondaryTooltip,\n      icon,\n      isSelected,\n      isDisabled,\n      onClick,\n      label,\n      ...rest\n    } = props;\n\n    // false, because rest props can be added by ariakit when button is used as a trigger\n    // assertEmpty in this case is only used at typescript level, not runtime level\n    assertEmpty(rest, false);\n\n    const Button = (\n      <AriakitToolbarItem\n        aria-label={label}\n        className={mergeCSSClasses(\n          \"bn-ak-button bn-ak-secondary\",\n          className || \"\"\n        )}\n        // Needed as Safari doesn't focus button elements on mouse down\n        // unlike other browsers.\n        onMouseDown={(e) => {\n          if (isSafari()) {\n            (e.currentTarget as HTMLButtonElement).focus();\n          }\n        }}\n        onClick={onClick}\n        aria-pressed={isSelected}\n        data-selected={isSelected ? \"true\" : undefined}\n        data-test={\n          mainTooltip &&\n          mainTooltip.slice(0, 1).toLowerCase() +\n            mainTooltip.replace(/\\s+/g, \"\").slice(1)\n        }\n        //   size={\"xs\"}\n        disabled={isDisabled || false}\n        ref={ref}\n        {...rest}>\n        {icon}\n        {children}\n      </AriakitToolbarItem>\n    );\n\n    if (mainTooltip) {\n      return (\n        <AriakitTooltipProvider>\n          <AriakitTooltipAnchor className=\"link\" render={Button} />\n          <AriakitTooltip className=\"bn-ak-tooltip\">\n            <span>{mainTooltip}</span>\n            {secondaryTooltip && <span>{secondaryTooltip}</span>}\n          </AriakitTooltip>\n        </AriakitTooltipProvider>\n      );\n    }\n\n    return Button;\n  }\n);\n","import {\n  Select as AriakitSelect,\n  SelectArrow as AriakitSelectArrow,\n  SelectItem as AriakitSelectItem,\n  SelectItemCheck as AriakitSelectItemCheck,\n  SelectPopover as AriakitSelectPopover,\n  SelectProvider as AriakitSelectProvider,\n  ToolbarItem as AriakitToolbarItem,\n} from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const ToolbarSelect = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"Toolbar\"][\"Select\"]\n>((props, ref) => {\n  const { className, items, isDisabled, ...rest } = props;\n\n  assertEmpty(rest);\n\n  const selectedItem = props.items.filter((p) => p.isSelected)[0];\n\n  const setValue = (value: string) => {\n    items.find((item) => item.text === value)!.onClick?.();\n  };\n\n  return (\n    <AriakitSelectProvider value={selectedItem.text} setValue={setValue}>\n      <AriakitSelect\n        className={\"bn-ak-button bn-ak-secondary\"}\n        disabled={isDisabled}\n        aria-label=\"Text alignment\"\n        render={<AriakitToolbarItem />}>\n        {selectedItem.icon} {selectedItem.text} <AriakitSelectArrow />\n      </AriakitSelect>\n      <AriakitSelectPopover\n        className={mergeCSSClasses(\"bn-ak-popover\", className || \"\")}\n        ref={ref}\n        gutter={4}>\n        {items.map((option) => (\n          <AriakitSelectItem\n            className={\"bn-ak-select-item\"}\n            key={option.text}\n            value={option.text}>\n            {option.icon}\n            {option.text}\n            {option.text === selectedItem.text && <AriakitSelectItemCheck />}\n          </AriakitSelectItem>\n        ))}\n      </AriakitSelectPopover>\n    </AriakitSelectProvider>\n  );\n});\n","import {\n  BlockSchema,\n  InlineContentSchema,\n  mergeCSSClasses,\n  StyleSchema,\n} from \"@blocknote/core\";\nimport {\n  BlockNoteViewProps,\n  BlockNoteViewRaw,\n  Components,\n  ComponentsContext,\n} from \"@blocknote/react\";\n\nimport { Form } from \"./input/Form.js\";\nimport { TextInput } from \"./input/TextInput.js\";\nimport {\n  Menu,\n  MenuDivider,\n  MenuDropdown,\n  MenuItem,\n  MenuLabel,\n  MenuTrigger,\n} from \"./menu/Menu.js\";\nimport { Panel } from \"./panel/Panel.js\";\nimport { PanelButton } from \"./panel/PanelButton.js\";\nimport { PanelFileInput } from \"./panel/PanelFileInput.js\";\nimport { PanelTab } from \"./panel/PanelTab.js\";\nimport { PanelTextInput } from \"./panel/PanelTextInput.js\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"./popover/Popover.js\";\nimport { SideMenu } from \"./sideMenu/SideMenu.js\";\nimport { SideMenuButton } from \"./sideMenu/SideMenuButton.js\";\nimport { GridSuggestionMenu } from \"./suggestionMenu/gridSuggestionMenu/GridSuggestionMenu.js\";\nimport { GridSuggestionMenuEmptyItem } from \"./suggestionMenu/gridSuggestionMenu/GridSuggestionMenuEmptyItem.js\";\nimport { GridSuggestionMenuItem } from \"./suggestionMenu/gridSuggestionMenu/GridSuggestionMenuItem.js\";\nimport { GridSuggestionMenuLoader } from \"./suggestionMenu/gridSuggestionMenu/GridSuggestionMenuLoader.js\";\nimport { SuggestionMenu } from \"./suggestionMenu/SuggestionMenu.js\";\nimport { SuggestionMenuEmptyItem } from \"./suggestionMenu/SuggestionMenuEmptyItem.js\";\nimport { SuggestionMenuItem } from \"./suggestionMenu/SuggestionMenuItem.js\";\nimport { SuggestionMenuLabel } from \"./suggestionMenu/SuggestionMenuLabel.js\";\nimport { SuggestionMenuLoader } from \"./suggestionMenu/SuggestionMenuLoader.js\";\nimport { ExtendButton } from \"./tableHandle/ExtendButton.js\";\nimport { TableHandle } from \"./tableHandle/TableHandle.js\";\nimport { Toolbar } from \"./toolbar/Toolbar.js\";\nimport { ToolbarButton } from \"./toolbar/ToolbarButton.js\";\nimport { ToolbarSelect } from \"./toolbar/ToolbarSelect.js\";\n\nimport \"./style.css\";\n\nexport const components: Components = {\n  Toolbar: {\n    Root: Toolbar,\n    Button: ToolbarButton,\n    Select: ToolbarSelect,\n  },\n  FilePanel: {\n    Root: Panel,\n    Button: PanelButton,\n    FileInput: PanelFileInput,\n    TabPanel: PanelTab,\n    TextInput: PanelTextInput,\n  },\n  GridSuggestionMenu: {\n    Root: GridSuggestionMenu,\n    Item: GridSuggestionMenuItem,\n    EmptyItem: GridSuggestionMenuEmptyItem,\n    Loader: GridSuggestionMenuLoader,\n  },\n  SideMenu: {\n    Root: SideMenu,\n    Button: SideMenuButton,\n  },\n  SuggestionMenu: {\n    Root: SuggestionMenu,\n    Item: SuggestionMenuItem,\n    EmptyItem: SuggestionMenuEmptyItem,\n    Label: SuggestionMenuLabel,\n    Loader: SuggestionMenuLoader,\n  },\n  TableHandle: {\n    Root: TableHandle,\n    ExtendButton: ExtendButton,\n  },\n  Generic: {\n    Form: {\n      Root: Form,\n      TextInput: TextInput,\n    },\n    Menu: {\n      Root: Menu,\n      Trigger: MenuTrigger,\n      Dropdown: MenuDropdown,\n      Divider: MenuDivider,\n      Label: MenuLabel,\n      Item: MenuItem,\n    },\n    Popover: {\n      Root: Popover,\n      Trigger: PopoverTrigger,\n      Content: PopoverContent,\n    },\n  },\n};\n\nexport const BlockNoteView = <\n  BSchema extends BlockSchema,\n  ISchema extends InlineContentSchema,\n  SSchema extends StyleSchema\n>(\n  props: BlockNoteViewProps<BSchema, ISchema, SSchema>\n) => {\n  const { className, ...rest } = props;\n\n  return (\n    <ComponentsContext.Provider value={components}>\n      <BlockNoteViewRaw\n        className={mergeCSSClasses(\"bn-ariakit\", className || \"\")}\n        {...rest}\n      />\n    </ComponentsContext.Provider>\n  );\n};\n"],"names":["Form","props","children","rest","assertEmpty","jsx","AriakitFormProvider","TextInput","forwardRef","ref","className","name","label","variant","icon","value","autoFocus","placeholder","disabled","onKeyDown","onChange","onSubmit","autoComplete","jsxs","Fragment","AriakitFormLabel","AriakitFormInput","mergeCSSClasses","Menu","onOpenChange","position","sub","AriakitMenuProvider","MenuDropdown","AriakitMenu","MenuItem","checked","subTrigger","onClick","AriakitMenuButton","AriakitMenuItem","AriakitMenuButtonArrow","AriakitCheckboxCheck","MenuLabel","AriakitMenuGroupLabel","MenuTrigger","MenuDivider","AriakitMenuSeparator","Panel","tabs","defaultOpenTab","openTab","setOpenTab","loading","AriakitTabProvider","activeId","AriakitTabList","tab","AriakitTab","AriakitTabPanel","PanelButton","AriakitButton","PanelFileInput","accept","e","PanelTab","PanelTextInput","PopoverTrigger","AriakitPopoverDisclosure","PopoverContent","AriakitPopover","Popover","opened","AriakitPopoverProvider","SideMenu","AriakitGroup","SideMenuButton","onDragEnd","onDragStart","draggable","GridSuggestionMenu","id","columns","GridSuggestionMenuEmptyItem","GridSuggestionMenuItem","isSelected","item","itemRef","useRef","useEffect","overflow","elementOverflow","mergeRefs","GridSuggestionMenuLoader","SuggestionMenu","SuggestionMenuEmptyItem","SuggestionMenuItem","event","SuggestionMenuLabel","SuggestionMenuLoader","ExtendButton","onMouseDown","TableHandle","style","Toolbar","onMouseEnter","onMouseLeave","AriakitToolbar","ToolbarButton","mainTooltip","secondaryTooltip","isDisabled","Button","AriakitToolbarItem","isSafari","AriakitTooltipProvider","AriakitTooltipAnchor","AriakitTooltip","ToolbarSelect","items","selectedItem","p","setValue","_b","_a","AriakitSelectProvider","AriakitSelect","AriakitSelectArrow","AriakitSelectPopover","option","AriakitSelectItem","AriakitSelectItemCheck","components","BlockNoteView","ComponentsContext","BlockNoteViewRaw"],"mappings":"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"}