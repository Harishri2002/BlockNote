{"version":3,"file":"blocknote-ariakit.js","sources":["../src/input/Form.tsx","../src/input/TextInput.tsx","../src/menu/Menu.tsx","../src/panel/Panel.tsx","../src/panel/PanelButton.tsx","../src/panel/PanelFileInput.tsx","../src/panel/PanelTab.tsx","../src/panel/PanelTextInput.tsx","../src/popover/Popover.tsx","../src/sideMenu/SideMenu.tsx","../src/sideMenu/SideMenuButton.tsx","../src/suggestionMenu/gridSuggestionMenu/GridSuggestionMenu.tsx","../src/suggestionMenu/gridSuggestionMenu/GridSuggestionMenuEmptyItem.tsx","../src/suggestionMenu/gridSuggestionMenu/GridSuggestionMenuItem.tsx","../src/suggestionMenu/gridSuggestionMenu/GridSuggestionMenuLoader.tsx","../src/suggestionMenu/SuggestionMenu.tsx","../src/suggestionMenu/SuggestionMenuEmptyItem.tsx","../src/suggestionMenu/SuggestionMenuItem.tsx","../src/suggestionMenu/SuggestionMenuLabel.tsx","../src/suggestionMenu/SuggestionMenuLoader.tsx","../src/tableHandle/ExtendButton.tsx","../src/tableHandle/TableHandle.tsx","../src/toolbar/Toolbar.tsx","../src/toolbar/ToolbarButton.tsx","../src/toolbar/ToolbarSelect.tsx","../src/index.tsx"],"sourcesContent":["import { FormProvider as AriakitFormProvider } from \"@ariakit/react\";\n\nimport { assertEmpty } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\n\nexport const Form = (props: ComponentProps[\"Generic\"][\"Form\"][\"Root\"]) => {\n  const { children, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return <AriakitFormProvider>{children}</AriakitFormProvider>;\n};\n","import {\n  FormInput as AriakitFormInput,\n  FormLabel as AriakitFormLabel,\n} from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const TextInput = forwardRef<\n  HTMLInputElement,\n  ComponentProps[\"Generic\"][\"Form\"][\"TextInput\"]\n>((props, ref) => {\n  const {\n    className,\n    name,\n    label,\n    variant,\n    icon,\n    value,\n    autoFocus,\n    placeholder,\n    disabled,\n    onKeyDown,\n    onChange,\n    onSubmit,\n    autoComplete,\n    ...rest\n  } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <>\n      {props.label && <AriakitFormLabel name={name}>{label}</AriakitFormLabel>}\n      <div className=\"bn-ak-input-wrapper\">\n        {icon}\n        <AriakitFormInput\n          className={mergeCSSClasses(\n            \"bn-ak-input\",\n            className || \"\",\n            variant === \"large\" ? \"bn-ak-input-large\" : \"\"\n          )}\n          ref={ref}\n          name={name}\n          value={value}\n          autoFocus={autoFocus}\n          placeholder={placeholder}\n          disabled={disabled}\n          onKeyDown={onKeyDown}\n          onChange={onChange}\n          onSubmit={onSubmit}\n          autoComplete={autoComplete}\n        />\n      </div>\n    </>\n  );\n});\n","import {\n  CheckboxCheck as AriakitCheckboxCheck,\n  Menu as AriakitMenu,\n  MenuButton as AriakitMenuButton,\n  MenuButtonArrow as AriakitMenuButtonArrow,\n  MenuGroupLabel as AriakitMenuGroupLabel,\n  MenuItem as AriakitMenuItem,\n  MenuProvider as AriakitMenuProvider,\n  MenuSeparator as AriakitMenuSeparator,\n} from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const Menu = (props: ComponentProps[\"Generic\"][\"Menu\"][\"Root\"]) => {\n  const {\n    children,\n    onOpenChange,\n    position,\n    sub, // unused\n    ...rest\n  } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <AriakitMenuProvider\n      placement={position}\n      setOpen={onOpenChange}\n      virtualFocus={true}>\n      {children}\n    </AriakitMenuProvider>\n  );\n};\n\nexport const MenuDropdown = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"Generic\"][\"Menu\"][\"Dropdown\"]\n>((props, ref) => {\n  const {\n    className,\n    children,\n    sub, // unused\n    ...rest\n  } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <AriakitMenu\n      unmountOnHide={true}\n      className={mergeCSSClasses(\"bn-ak-menu\", className || \"\")}\n      ref={ref}>\n      {children}\n    </AriakitMenu>\n  );\n});\n\nexport const MenuItem = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"Generic\"][\"Menu\"][\"Item\"]\n>((props, ref) => {\n  const { className, children, icon, checked, subTrigger, onClick, ...rest } =\n    props;\n\n  assertEmpty(rest);\n\n  if (subTrigger) {\n    return (\n      <AriakitMenuButton\n        render={<AriakitMenuItem />}\n        className={mergeCSSClasses(\"bn-ak-menu-item\", className || \"\")}\n        ref={ref}\n        onClick={onClick}>\n        {icon}\n        {children}\n        <AriakitMenuButtonArrow />\n        {checked !== undefined && <AriakitCheckboxCheck checked={checked} />}\n      </AriakitMenuButton>\n    );\n  }\n  return (\n    <AriakitMenuItem\n      className={mergeCSSClasses(\"bn-ak-menu-item\", className || \"\")}\n      ref={ref}\n      onClick={onClick}>\n      {icon}\n      {children}\n      {checked !== undefined && <AriakitCheckboxCheck checked={checked} />}\n    </AriakitMenuItem>\n  );\n});\n\nexport const MenuLabel = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"Generic\"][\"Menu\"][\"Label\"]\n>((props, ref) => {\n  const { className, children, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <AriakitMenuGroupLabel\n      className={mergeCSSClasses(\"bn-ak-group-label\", className || \"\")}\n      ref={ref}>\n      {children}\n    </AriakitMenuGroupLabel>\n  );\n});\n\nexport const MenuTrigger = (\n  props: ComponentProps[\"Generic\"][\"Menu\"][\"Trigger\"]\n) => {\n  const { children, sub, ...rest } = props;\n\n  assertEmpty(rest);\n\n  if (sub) {\n    return children;\n  }\n\n  return <AriakitMenuButton render={children as any}></AriakitMenuButton>;\n};\n\nexport const MenuDivider = forwardRef<\n  HTMLHRElement,\n  ComponentProps[\"Generic\"][\"Menu\"][\"Divider\"]\n>((props, ref) => {\n  const { className, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <AriakitMenuSeparator\n      className={mergeCSSClasses(\"bn-ak-separator\", className || \"\")}\n      ref={ref}\n    />\n  );\n});\n","import {\n  Tab as AriakitTab,\n  TabList as AriakitTabList,\n  TabPanel as AriakitTabPanel,\n  TabProvider as AriakitTabProvider,\n} from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const Panel = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"FilePanel\"][\"Root\"]\n>((props, ref) => {\n  const {\n    className,\n    tabs,\n    defaultOpenTab,\n    openTab,\n    setOpenTab,\n    loading, // TODO: implement loading\n    ...rest\n  } = props;\n  assertEmpty(rest);\n\n  return (\n    <div\n      className={mergeCSSClasses(\"bn-ak-wrapper\", className || \"\")}\n      ref={ref}>\n      <AriakitTabProvider\n        defaultSelectedId={defaultOpenTab}\n        selectedId={openTab}\n        setActiveId={(activeId) => {\n          if (activeId) {\n            setOpenTab(activeId);\n          }\n        }}>\n        {/*{loading && <LoadingOverlay visible={loading} />}*/}\n\n        <AriakitTabList className={\"bn-ak-tab-list\"}>\n          {tabs.map((tab) => (\n            <AriakitTab className={\"bn-ak-tab\"} id={tab.name} key={tab.name}>\n              {tab.name}\n            </AriakitTab>\n          ))}\n        </AriakitTabList>\n\n        <div className={\"bn-ak-panels\"}>\n          {tabs.map((tab) => (\n            <AriakitTabPanel tabId={tab.name} key={tab.name}>\n              {tab.tabPanel}\n            </AriakitTabPanel>\n          ))}\n        </div>\n      </AriakitTabProvider>\n    </div>\n  );\n});\n","import { Button as AriakitButton } from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const PanelButton = forwardRef<\n  HTMLButtonElement,\n  ComponentProps[\"FilePanel\"][\"Button\"]\n>((props, ref) => {\n  const { className, children, onClick, label, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <AriakitButton\n      className={mergeCSSClasses(\"bn-ak-button\", className || \"\")}\n      onClick={onClick}\n      aria-label={label}\n      ref={ref}>\n      {children}\n    </AriakitButton>\n  );\n});\n","import {\n  FormInput as AriakitFormInput,\n  FormProvider as AriakitFormProvider,\n} from \"@ariakit/react\";\n\nimport { assertEmpty } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const PanelFileInput = forwardRef<\n  HTMLInputElement,\n  ComponentProps[\"FilePanel\"][\"FileInput\"]\n>((props, ref) => {\n  const { className, accept, value, placeholder, onChange, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <AriakitFormProvider>\n      <AriakitFormInput\n        className={className}\n        ref={ref}\n        name={\"panel-input\"}\n        type={\"file\"}\n        accept={accept}\n        value={value ? value.name : undefined}\n        onChange={async (e) => onChange?.(e.target.files![0])}\n        placeholder={placeholder}\n      />\n    </AriakitFormProvider>\n  );\n});\n","import { assertEmpty } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const PanelTab = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"FilePanel\"][\"TabPanel\"]\n>((props, ref) => {\n  const { className, children, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <div className={className} ref={ref}>\n      {children}\n    </div>\n  );\n});\n","import {\n  FormInput as AriakitFormInput,\n  FormProvider as AriakitFormProvider,\n} from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const PanelTextInput = forwardRef<\n  HTMLInputElement,\n  ComponentProps[\"FilePanel\"][\"TextInput\"]\n>((props, ref) => {\n  const { className, value, placeholder, onKeyDown, onChange, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <AriakitFormProvider>\n      <AriakitFormInput\n        className={mergeCSSClasses(\"bn-ak-input\", className || \"\")}\n        name={\"panel-input\"}\n        value={value}\n        placeholder={placeholder}\n        onChange={onChange}\n        onKeyDown={onKeyDown}\n        data-test={\"embed-input\"}\n        ref={ref}\n      />\n    </AriakitFormProvider>\n  );\n});\n","import {\n  Popover as AriakitPopover,\n  PopoverDisclosure as AriakitPopoverDisclosure,\n  PopoverProvider as AriakitPopoverProvider,\n} from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const PopoverTrigger = forwardRef<\n  HTMLButtonElement,\n  ComponentProps[\"Generic\"][\"Popover\"][\"Trigger\"]\n>((props, ref) => {\n  const { children, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return <AriakitPopoverDisclosure render={children as any} ref={ref} />;\n});\n\nexport const PopoverContent = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"Generic\"][\"Popover\"][\"Content\"]\n>((props, ref) => {\n  const { className, children, variant, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <AriakitPopover\n      className={mergeCSSClasses(\"bn-ak-popover\", className || \"\")}\n      ref={ref}>\n      {children}\n    </AriakitPopover>\n  );\n});\n\nexport const Popover = (\n  props: ComponentProps[\"Generic\"][\"Popover\"][\"Root\"]\n) => {\n  const { children, opened, position, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <AriakitPopoverProvider open={opened} placement={position}>\n      {children}\n    </AriakitPopoverProvider>\n  );\n};\n","import { Group as AriakitGroup } from \"@ariakit/react\";\n\nimport { assertEmpty } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const SideMenu = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"SideMenu\"][\"Root\"]\n>((props, ref) => {\n  const { className, children, ...rest } = props;\n\n  assertEmpty(rest, false);\n\n  return (\n    <AriakitGroup className={className} ref={ref} {...rest}>\n      {children}\n    </AriakitGroup>\n  );\n});\n","import { Button as AriakitButton } from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const SideMenuButton = forwardRef<\n  HTMLButtonElement,\n  ComponentProps[\"SideMenu\"][\"Button\"]\n>((props, ref) => {\n  const {\n    className,\n    children,\n    icon,\n    onClick,\n    label,\n    onDragEnd,\n    onDragStart,\n    draggable,\n    ...rest\n  } = props;\n\n  // false, because rest props can be added by ariakit when button is used as a trigger\n  // assertEmpty in this case is only used at typescript level, not runtime level\n  assertEmpty(rest, false);\n\n  return (\n    <AriakitButton\n      onDragEnd={onDragEnd}\n      onDragStart={onDragStart}\n      draggable={draggable}\n      aria-label={label}\n      className={mergeCSSClasses(\n        \"bn-ak-button bn-ak-secondary\",\n        className || \"\"\n      )}\n      ref={ref}\n      onClick={onClick}\n      {...rest}>\n      {icon}\n      {children}\n    </AriakitButton>\n  );\n});\n","import { assertEmpty } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const GridSuggestionMenu = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"GridSuggestionMenu\"][\"Root\"]\n>((props, ref) => {\n  const { className, children, id, columns, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <div\n      className={className}\n      style={{ gridTemplateColumns: `repeat(${columns}, 1fr)` } as any}\n      ref={ref}\n      id={id}\n      role=\"grid\">\n      {children}\n    </div>\n  );\n});\n","import { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const GridSuggestionMenuEmptyItem = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"GridSuggestionMenu\"][\"EmptyItem\"]\n>((props, ref) => {\n  const { className, children, columns, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <div\n      className={mergeCSSClasses(\"bn-ak-menu-item\", className || \"\")}\n      style={{ gridColumn: `1 / ${columns + 1}` }}\n      ref={ref}>\n      <div className=\"bn-ak-suggestion-menu-item-label\">{children}</div>\n    </div>\n  );\n});\n","import { assertEmpty } from \"@blocknote/core\";\nimport { ComponentProps, elementOverflow, mergeRefs } from \"@blocknote/react\";\nimport { forwardRef, useEffect, useRef } from \"react\";\n\nexport const GridSuggestionMenuItem = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"GridSuggestionMenu\"][\"Item\"]\n>((props, ref) => {\n  const { className, isSelected, onClick, item, id, ...rest } = props;\n\n  assertEmpty(rest);\n\n  const itemRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!itemRef.current || !isSelected) {\n      return;\n    }\n\n    const overflow = elementOverflow(\n      itemRef.current,\n      document.querySelector(\".bn-grid-suggestion-menu\")!\n    );\n\n    if (overflow === \"top\") {\n      itemRef.current.scrollIntoView(true);\n    } else if (overflow === \"bottom\") {\n      itemRef.current.scrollIntoView(false);\n    }\n  }, [isSelected]);\n\n  return (\n    <div\n      className={className}\n      ref={mergeRefs([ref, itemRef])}\n      id={id}\n      role=\"option\"\n      onClick={onClick}\n      aria-selected={isSelected || undefined}>\n      {item.icon}\n    </div>\n  );\n});\n","import { assertEmpty } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const GridSuggestionMenuLoader = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"GridSuggestionMenu\"][\"Loader\"]\n>((props, ref) => {\n  const {\n    className,\n    children, // unused, using \"dots\" instead\n    columns,\n    ...rest\n  } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <div\n      className={className}\n      style={{ gridColumn: `1 / ${columns + 1}` }}\n      ref={ref}>\n      {children}\n    </div>\n  );\n});\n","import { Group as AriakitGroup } from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const SuggestionMenu = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"SuggestionMenu\"][\"Root\"]\n>((props, ref) => {\n  const { className, children, id, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <AriakitGroup\n      className={mergeCSSClasses(\"bn-ak-menu\", className || \"\")}\n      id={id}\n      role=\"listbox\"\n      ref={ref}>\n      {children}\n    </AriakitGroup>\n  );\n});\n","import { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const SuggestionMenuEmptyItem = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"SuggestionMenu\"][\"EmptyItem\"]\n>((props, ref) => {\n  const { className, children, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <div\n      className={mergeCSSClasses(\"bn-ak-menu-item\", className || \"\")}\n      ref={ref}>\n      <div className=\"bn-ak-suggestion-menu-item-label\">{children}</div>\n    </div>\n  );\n});\n","import { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps, elementOverflow, mergeRefs } from \"@blocknote/react\";\nimport { forwardRef, useEffect, useRef } from \"react\";\n\nexport const SuggestionMenuItem = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"SuggestionMenu\"][\"Item\"]\n>((props, ref) => {\n  const { className, item, isSelected, onClick, id, ...rest } = props;\n\n  assertEmpty(rest);\n\n  const itemRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!itemRef.current || !isSelected) {\n      return;\n    }\n\n    const overflow = elementOverflow(\n      itemRef.current,\n      document.querySelector(\".bn-suggestion-menu, #ai-suggestion-menu\")! // TODO\n    );\n\n    if (overflow === \"top\") {\n      itemRef.current.scrollIntoView(true);\n    } else if (overflow === \"bottom\") {\n      itemRef.current.scrollIntoView(false);\n    }\n  }, [isSelected]);\n\n  return (\n    <div\n      className={mergeCSSClasses(\"bn-ak-menu-item\", className || \"\")}\n      ref={mergeRefs([ref, itemRef])}\n      id={id}\n      onMouseDown={(event) => event.preventDefault()}\n      onClick={onClick}\n      role=\"option\"\n      aria-selected={isSelected || undefined}>\n      {item.icon && (\n        <div\n          className=\"bn-ak-suggestion-menu-item-section\"\n          data-position=\"left\">\n          {item.icon}\n        </div>\n      )}\n      <div className=\"bn-ak-suggestion-menu-item-body\">\n        <div className=\"bn-ak-suggestion-menu-item-title\">{item.title}</div>\n        <div className=\"bn-ak-suggestion-menu-item-subtitle\">\n          {item.subtext}\n        </div>\n      </div>\n      {item.badge && (\n        <div\n          data-position=\"right\"\n          className=\"bn-ak-suggestion-menu-item-section\">\n          <div>{item.badge}</div>\n        </div>\n      )}\n    </div>\n  );\n});\n","import { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const SuggestionMenuLabel = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"SuggestionMenu\"][\"Label\"]\n>((props, ref) => {\n  const { className, children, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <div\n      className={mergeCSSClasses(\"bn-ak-group-label\", className || \"\")}\n      ref={ref}>\n      {children}\n    </div>\n  );\n});\n","import { assertEmpty } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const SuggestionMenuLoader = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"SuggestionMenu\"][\"Loader\"]\n>((props, ref) => {\n  const { className, children, ...rest } = props;\n\n  assertEmpty(rest);\n\n  return (\n    <div className={className} ref={ref}>\n      {children}\n    </div>\n  );\n});\n","import { Button as AriakitButton } from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const ExtendButton = forwardRef<\n  HTMLButtonElement,\n  ComponentProps[\"TableHandle\"][\"ExtendButton\"]\n>((props, ref) => {\n  const { children, className, onMouseDown, onClick, ...rest } = props;\n\n  // false, because rest props can be added by mantine when button is used as a trigger\n  // assertEmpty in this case is only used at typescript level, not runtime level\n  assertEmpty(rest, false);\n\n  return (\n    <AriakitButton\n      className={mergeCSSClasses(\n        \"bn-ak-button bn-ak-secondary\",\n        className || \"\"\n      )}\n      ref={ref}\n      onMouseDown={onMouseDown}\n      onClick={onClick}\n      {...rest}>\n      {children}\n    </AriakitButton>\n  );\n});\n","import { Button as AriakitButton } from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const TableHandle = forwardRef<\n  HTMLButtonElement,\n  ComponentProps[\"TableHandle\"][\"Root\"]\n>((props, ref) => {\n  const {\n    className,\n    children,\n    draggable,\n    onDragStart,\n    onDragEnd,\n    style,\n    label,\n    ...rest\n  } = props;\n\n  // false, because rest props can be added by ariakit when button is used as a trigger\n  // assertEmpty in this case is only used at typescript level, not runtime level\n  assertEmpty(rest, false);\n\n  return (\n    <AriakitButton\n      className={mergeCSSClasses(\n        \"bn-ak-button bn-ak-secondary\",\n        className || \"\"\n      )}\n      ref={ref}\n      aria-label={label}\n      draggable={draggable}\n      onDragStart={onDragStart}\n      onDragEnd={onDragEnd}\n      style={style}\n      {...rest}>\n      {children}\n    </AriakitButton>\n  );\n});\n","import { Toolbar as AriakitToolbar } from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\ntype ToolbarProps = ComponentProps[\"Toolbar\"][\"Root\"];\n\nexport const Toolbar = forwardRef<HTMLDivElement, ToolbarProps>(\n  (props, ref) => {\n    const { className, children, onMouseEnter, onMouseLeave, ...rest } = props;\n\n    assertEmpty(rest);\n\n    return (\n      <AriakitToolbar\n        className={mergeCSSClasses(\"bn-ak-toolbar\", className || \"\")}\n        ref={ref}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}>\n        {children}\n      </AriakitToolbar>\n    );\n  }\n);\n","import {\n  Tooltip as AriakitTooltip,\n  TooltipAnchor as AriakitTooltipAnchor,\n  ToolbarItem as AriakitToolbarItem,\n  TooltipProvider as AriakitTooltipProvider,\n} from \"@ariakit/react\";\n\nimport { assertEmpty, isSafari, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\ntype ToolbarButtonProps = ComponentProps[\"Toolbar\"][\"Button\"];\n\n/**\n * Helper for basic buttons that show in the formatting toolbar.\n */\nexport const ToolbarButton = forwardRef<HTMLButtonElement, ToolbarButtonProps>(\n  (props, ref) => {\n    const {\n      className,\n      children,\n      mainTooltip,\n      secondaryTooltip,\n      icon,\n      isSelected,\n      isDisabled,\n      onClick,\n      label,\n      ...rest\n    } = props;\n\n    // false, because rest props can be added by ariakit when button is used as a trigger\n    // assertEmpty in this case is only used at typescript level, not runtime level\n    assertEmpty(rest, false);\n\n    const Button = (\n      <AriakitToolbarItem\n        aria-label={label}\n        className={mergeCSSClasses(\n          \"bn-ak-button bn-ak-secondary\",\n          className || \"\"\n        )}\n        // Needed as Safari doesn't focus button elements on mouse down\n        // unlike other browsers.\n        onMouseDown={(e) => {\n          if (isSafari()) {\n            (e.currentTarget as HTMLButtonElement).focus();\n          }\n        }}\n        onClick={onClick}\n        aria-pressed={isSelected}\n        data-selected={isSelected ? \"true\" : undefined}\n        data-test={\n          mainTooltip &&\n          mainTooltip.slice(0, 1).toLowerCase() +\n            mainTooltip.replace(/\\s+/g, \"\").slice(1)\n        }\n        //   size={\"xs\"}\n        disabled={isDisabled || false}\n        ref={ref}\n        {...rest}>\n        {icon}\n        {children}\n      </AriakitToolbarItem>\n    );\n\n    if (mainTooltip) {\n      return (\n        <AriakitTooltipProvider>\n          <AriakitTooltipAnchor className=\"link\" render={Button} />\n          <AriakitTooltip className=\"bn-ak-tooltip\">\n            <span>{mainTooltip}</span>\n            {secondaryTooltip && <span>{secondaryTooltip}</span>}\n          </AriakitTooltip>\n        </AriakitTooltipProvider>\n      );\n    }\n\n    return Button;\n  }\n);\n","import {\n  Select as AriakitSelect,\n  SelectArrow as AriakitSelectArrow,\n  SelectItem as AriakitSelectItem,\n  SelectItemCheck as AriakitSelectItemCheck,\n  SelectPopover as AriakitSelectPopover,\n  SelectProvider as AriakitSelectProvider,\n  ToolbarItem as AriakitToolbarItem,\n} from \"@ariakit/react\";\n\nimport { assertEmpty, mergeCSSClasses } from \"@blocknote/core\";\nimport { ComponentProps } from \"@blocknote/react\";\nimport { forwardRef } from \"react\";\n\nexport const ToolbarSelect = forwardRef<\n  HTMLDivElement,\n  ComponentProps[\"Toolbar\"][\"Select\"]\n>((props, ref) => {\n  const { className, items, isDisabled, ...rest } = props;\n\n  assertEmpty(rest);\n\n  const selectedItem = props.items.filter((p) => p.isSelected)[0];\n\n  const setValue = (value: string) => {\n    items.find((item) => item.text === value)!.onClick?.();\n  };\n\n  return (\n    <AriakitSelectProvider value={selectedItem.text} setValue={setValue}>\n      <AriakitSelect\n        className={\"bn-ak-button bn-ak-secondary\"}\n        disabled={isDisabled}\n        aria-label=\"Text alignment\"\n        render={<AriakitToolbarItem />}>\n        {selectedItem.icon} {selectedItem.text} <AriakitSelectArrow />\n      </AriakitSelect>\n      <AriakitSelectPopover\n        className={mergeCSSClasses(\"bn-ak-popover\", className || \"\")}\n        ref={ref}\n        gutter={4}>\n        {items.map((option) => (\n          <AriakitSelectItem\n            className={\"bn-ak-select-item\"}\n            key={option.text}\n            value={option.text}>\n            {option.icon}\n            {option.text}\n            {option.text === selectedItem.text && <AriakitSelectItemCheck />}\n          </AriakitSelectItem>\n        ))}\n      </AriakitSelectPopover>\n    </AriakitSelectProvider>\n  );\n});\n","import {\n  BlockSchema,\n  InlineContentSchema,\n  mergeCSSClasses,\n  StyleSchema,\n} from \"@blocknote/core\";\nimport {\n  BlockNoteViewProps,\n  BlockNoteViewRaw,\n  Components,\n  ComponentsContext,\n} from \"@blocknote/react\";\n\nimport { Form } from \"./input/Form.js\";\nimport { TextInput } from \"./input/TextInput.js\";\nimport {\n  Menu,\n  MenuDivider,\n  MenuDropdown,\n  MenuItem,\n  MenuLabel,\n  MenuTrigger,\n} from \"./menu/Menu.js\";\nimport { Panel } from \"./panel/Panel.js\";\nimport { PanelButton } from \"./panel/PanelButton.js\";\nimport { PanelFileInput } from \"./panel/PanelFileInput.js\";\nimport { PanelTab } from \"./panel/PanelTab.js\";\nimport { PanelTextInput } from \"./panel/PanelTextInput.js\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"./popover/Popover.js\";\nimport { SideMenu } from \"./sideMenu/SideMenu.js\";\nimport { SideMenuButton } from \"./sideMenu/SideMenuButton.js\";\nimport { GridSuggestionMenu } from \"./suggestionMenu/gridSuggestionMenu/GridSuggestionMenu.js\";\nimport { GridSuggestionMenuEmptyItem } from \"./suggestionMenu/gridSuggestionMenu/GridSuggestionMenuEmptyItem.js\";\nimport { GridSuggestionMenuItem } from \"./suggestionMenu/gridSuggestionMenu/GridSuggestionMenuItem.js\";\nimport { GridSuggestionMenuLoader } from \"./suggestionMenu/gridSuggestionMenu/GridSuggestionMenuLoader.js\";\nimport { SuggestionMenu } from \"./suggestionMenu/SuggestionMenu.js\";\nimport { SuggestionMenuEmptyItem } from \"./suggestionMenu/SuggestionMenuEmptyItem.js\";\nimport { SuggestionMenuItem } from \"./suggestionMenu/SuggestionMenuItem.js\";\nimport { SuggestionMenuLabel } from \"./suggestionMenu/SuggestionMenuLabel.js\";\nimport { SuggestionMenuLoader } from \"./suggestionMenu/SuggestionMenuLoader.js\";\nimport { ExtendButton } from \"./tableHandle/ExtendButton.js\";\nimport { TableHandle } from \"./tableHandle/TableHandle.js\";\nimport { Toolbar } from \"./toolbar/Toolbar.js\";\nimport { ToolbarButton } from \"./toolbar/ToolbarButton.js\";\nimport { ToolbarSelect } from \"./toolbar/ToolbarSelect.js\";\n\nimport \"./style.css\";\n\nexport const components: Components = {\n  Toolbar: {\n    Root: Toolbar,\n    Button: ToolbarButton,\n    Select: ToolbarSelect,\n  },\n  FilePanel: {\n    Root: Panel,\n    Button: PanelButton,\n    FileInput: PanelFileInput,\n    TabPanel: PanelTab,\n    TextInput: PanelTextInput,\n  },\n  GridSuggestionMenu: {\n    Root: GridSuggestionMenu,\n    Item: GridSuggestionMenuItem,\n    EmptyItem: GridSuggestionMenuEmptyItem,\n    Loader: GridSuggestionMenuLoader,\n  },\n  SideMenu: {\n    Root: SideMenu,\n    Button: SideMenuButton,\n  },\n  SuggestionMenu: {\n    Root: SuggestionMenu,\n    Item: SuggestionMenuItem,\n    EmptyItem: SuggestionMenuEmptyItem,\n    Label: SuggestionMenuLabel,\n    Loader: SuggestionMenuLoader,\n  },\n  TableHandle: {\n    Root: TableHandle,\n    ExtendButton: ExtendButton,\n  },\n  Generic: {\n    Form: {\n      Root: Form,\n      TextInput: TextInput,\n    },\n    Menu: {\n      Root: Menu,\n      Trigger: MenuTrigger,\n      Dropdown: MenuDropdown,\n      Divider: MenuDivider,\n      Label: MenuLabel,\n      Item: MenuItem,\n    },\n    Popover: {\n      Root: Popover,\n      Trigger: PopoverTrigger,\n      Content: PopoverContent,\n    },\n  },\n};\n\nexport const BlockNoteView = <\n  BSchema extends BlockSchema,\n  ISchema extends InlineContentSchema,\n  SSchema extends StyleSchema\n>(\n  props: BlockNoteViewProps<BSchema, ISchema, SSchema>\n) => {\n  const { className, ...rest } = props;\n\n  return (\n    <ComponentsContext.Provider value={components}>\n      <BlockNoteViewRaw\n        className={mergeCSSClasses(\"bn-ariakit\", className || \"\")}\n        {...rest}\n      />\n    </ComponentsContext.Provider>\n  );\n};\n"],"names":["Form","props","children","rest","assertEmpty","jsx","AriakitFormProvider","TextInput","forwardRef","ref","className","name","label","variant","icon","value","autoFocus","placeholder","disabled","onKeyDown","onChange","onSubmit","autoComplete","jsxs","Fragment","AriakitFormLabel","AriakitFormInput","mergeCSSClasses","Menu","onOpenChange","position","sub","AriakitMenuProvider","MenuDropdown","AriakitMenu","MenuItem","checked","subTrigger","onClick","AriakitMenuButton","AriakitMenuItem","AriakitMenuButtonArrow","AriakitCheckboxCheck","MenuLabel","AriakitMenuGroupLabel","MenuTrigger","MenuDivider","AriakitMenuSeparator","Panel","tabs","defaultOpenTab","openTab","setOpenTab","loading","AriakitTabProvider","activeId","AriakitTabList","tab","AriakitTab","AriakitTabPanel","PanelButton","AriakitButton","PanelFileInput","accept","e","PanelTab","PanelTextInput","PopoverTrigger","AriakitPopoverDisclosure","PopoverContent","AriakitPopover","Popover","opened","AriakitPopoverProvider","SideMenu","AriakitGroup","SideMenuButton","onDragEnd","onDragStart","draggable","GridSuggestionMenu","id","columns","GridSuggestionMenuEmptyItem","GridSuggestionMenuItem","isSelected","item","itemRef","useRef","useEffect","overflow","elementOverflow","mergeRefs","GridSuggestionMenuLoader","SuggestionMenu","SuggestionMenuEmptyItem","SuggestionMenuItem","event","SuggestionMenuLabel","SuggestionMenuLoader","ExtendButton","onMouseDown","TableHandle","style","Toolbar","onMouseEnter","onMouseLeave","AriakitToolbar","ToolbarButton","mainTooltip","secondaryTooltip","isDisabled","Button","AriakitToolbarItem","isSafari","AriakitTooltipProvider","AriakitTooltipAnchor","AriakitTooltip","ToolbarSelect","items","selectedItem","p","setValue","_b","_a","AriakitSelectProvider","AriakitSelect","AriakitSelectArrow","AriakitSelectPopover","option","AriakitSelectItem","AriakitSelectItemCheck","components","BlockNoteView","ComponentsContext","BlockNoteViewRaw"],"mappings":"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"}